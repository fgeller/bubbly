resource "extract" "gotest" {
    spec {
        input "file" { type = string }

        type = "json"
        source {
            // file = self.input.file
            contents = "[${join(",", split("\n", trimspace(file(self.input.file))))}]"
            format = list(object({
                Issues: list(object({
                  rule_id: string,
                  severity: string,
                  details: string,
                }))
            }))
        }
    }
}

resource "transform" "gotest" {
    spec {
        input "results" { }

        data "test_run" {
            fields = {
                "tool": "gotest",
                "type": "unit_test"
            }
            joins = ["release"]
        }

        dynamic "data" {
            // Filter all the elements that aren't actually test results
            for_each = [for i in self.input.results: i if can(i["Test"]) && can(i["Package"]) && can(i["Elapsed"])]
            labels = ["test_case"]
            iterator = it
            content {
                fields = {
                    "name": it.value["Test"],
                    "message": join("\n", [for i in self.input.results: i["Output"] if can(i["Output"]) && can(i["Test"]) && try(i["Test"], "") == it.value["Test"]]),
                    "result": lower(it.value["Action"]) == "pass",
                }
                joins = ["test_run"]
            }
        }
    }
}

resource "load" "gotest" {
    spec {
        input "data" {}

        data = self.input.data
    }
}

resource "pipeline" "gotest" {
  spec {
    input "file" {
      default = "./gotest.json"
    }
    task "extract" {
      resource = "extract/gotest"
      input "file" {
        value = self.input.file
      }
    }
    task "transform" {
      resource = "transform/gotest"
      input "results" {
        value = self.task.extract.value
      }
    }
    task "load" {
      resource = "load/gotest"
      input "data" {
        value = self.task.transform.value
      }
    }
  }
}

// resource "run" "gotest" {
//     spec {
//         resource = "pipeline/gotest"
//     }
// }
