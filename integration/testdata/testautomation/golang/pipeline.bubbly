
resource "extract" "gotest" {
    // this is an input to the extract to make it reusable
    spec {
        input "file" {}
        type = "json"
        source {
            // The output from go test -json is not valid json, it's just a flat
            // list of json objects { }.
            // We can convert that into valid JSON which we can parse as a list
            contents = "[${join(",", split("\n", trimspace(file(self.input.file))))}]"
            format = list(object({
                Issues: list(object({
                  rule_id: string,
                  severity: string,
                  details: string,
                }))
            }))
        }
    }
}

resource "transform" "gotest" {
    spec {
        input "data" {}

        data "commit" {
            fields = {
                "id": "madeupcommit54321"
            }
        }

        data "test_run" {
            fields = {
                "name": "testrun123"
            }
        }

        dynamic "data" {
            for_each = [for i in self.input.data: i if i.Test != null && i.Package != null && i.Elapsed != null]
            iterator = it
            labels = ["test_case"]
            content {
                fields = {
                    "name": "${it.value.Package}/${it.value.Test}"
                    "result": lower(it.value.Action) == "pass"
                }
            }
        }
    }
}

resource "load" "gotest" {
    spec {
        input "data" {}
        data = self.input.data
    }
}

resource "pipeline" "gotest" {
    spec {
        input "file" {}
        // Each task in a pipeline has an output, similar to resources,
        // so that task outputs can be referenced
        task "extract" {
            resource = "extract/gotest"
            input "file" {
                value = self.input.file
            }
        }
        task "transform" {
            resource = "transform/gotest"
            input "data" {
                value = self.task.extract.value
            }
        }
        task "load" {
            resource = "load/gotest"
            input "data" {
                value = self.task.transform.value
            }
        }
    }
}

resource "run" "gotest" {
    spec {
        // specify the name of the pipeline resource to execute
        resource = "pipeline/gotest"
        // specify the pipeline input(s) required
        input "file" {
            value = "./testdata/testautomation/golang/gotest.json"
        }
    }
}
