
resource "importer" "sonarqube" {
    api_version = "v1"
    spec {
        input "file" {}
        type = "json"
        source {
            file = self.input.file
            format = object({
                issues: list(object({
                    engineId: string,
                    ruleId: string,
                    severity: string,
                    type: string,
                    primaryLocation: object({
                        message: string,
                        filePath: string,
                        textRange: object({
                            startLine: number,
                            endLine: number,
                            startColumn: number,
                            endColumn: number
                        })
                    })
                }))
            })
        }
    }
}

resource "translator" "sonarqube" {
    api_version = "v1"
    spec {
        input "data" {}
        input "repository" {}
        // this is some crazy dynamic HCL stuff to create the "data" blocks

        data "repository_version" {
            field "id" {
                value = self.input.repository.version
            }
        }

        dynamic "data" {
            for_each = self.input.data.issues
            iterator = issue
            labels = ["test_table"]
            content {
                field "test_field" {
                    value = "This field exists in table_${issue.value.ruleId}"
                }
            }
        }
    }
}

// This is the upload step, just renamed to publish...
resource "publish" "sonarqube" {
    api_version = "v1"
    spec {
        input "data" {}
        // what do we need here?!
        data = self.input.data
    }
}

// How do we tie all the above resources together...? In a pipeline!
// A pipeline is just another reusable resource, and only a pipelineRun
// actually triggers a pipeline to run
resource "pipeline" "sonarqube" {
    api_version = "v1"
    spec {
        input "file" {}
        // Each task in a pipeline has an output, similar to resources,
        // so that task outputs can be referenced
        task "import" {
            resource = "importer/sonarqube"
            input "file" {
                value = self.input.file
            }
        }
        task "translator" {
            resource = "translator/sonarqube"
            input "data" {
                // here we reference the output of the task "importer"
                value = self.task.import.value
            }
        }
        task "publish" {
            resource = "publish/sonarqube"
            input "data" {
                value = self.task.translator.value
            }
        }
    }
}
